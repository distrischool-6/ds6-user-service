# ===============================================
# TEST CONFIGURATION
# ===============================================
spring.application.name=user-service-test

# ===============================================
# IN-MEMORY H2 DATABASE FOR TESTS
# ===============================================
# Usa H2 em memória para testes, eliminando dependência de PostgreSQL externo
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

# ===============================================
# JPA CONFIGURATION FOR TESTS
# ===============================================
# Usa dialeto H2 para testes
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Cria e descarta tabelas automaticamente para cada teste
spring.jpa.hibernate.ddl-auto=create-drop
# Desabilita SQL logs nos testes para saída mais limpa
spring.jpa.show-sql=false

# ===============================================
# FLYWAY CONFIGURATION FOR TESTS
# ===============================================
# Desabilita Flyway nos testes pois usamos create-drop
spring.flyway.enabled=false

# ===============================================
# JWT CONFIGURATION FOR TESTS
# ===============================================
# Configurações simples para testes
jwt.secret=test-secret-key-for-unit-tests-only
jwt.expiration=3600000

# ===============================================
# LOGGING CONFIGURATION FOR TESTS
# ===============================================
# Reduz logs durante testes
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.org.springframework.web=WARN